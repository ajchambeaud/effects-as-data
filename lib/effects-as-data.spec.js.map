{"version":3,"sources":["../src/effects-as-data.spec.js"],"names":[],"mappings":"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","file":"effects-as-data.spec.js","sourcesContent":["const {\n  runAction,\n  runActions,\n  emptyState,\n  runPipe,\n  normalizePipe,\n  normalizeState,\n  buildPipes\n} = require('./effects-as-data')\nconst { stub } = require('sinon')\nconst assert = require('chai').assert\nconst { deepEqual: deep } = assert\nconst { test1Plugin, test1 } = require('./test/plugins/test1')\nconst { test1Pipe } = require('./test/pipes/test1')\nconst { testCall } = require('./test/pipes/test-call')\nconst { testMap } = require('./test/pipes/test-map')\nconst { testPanic } = require('./test/pipes/test-panic')\nconst { testEnd } = require('./test/pipes/test-end')\nconst { addToContext } = require('./actions')\nconst { logPlugin, log } = require('./plugins/log')\nconst { doubleCall } = require('./test/pipes/double-call')\nconst { passPayload } = require('./test/pipes/pass-payload')\nconst { merge } = require('ramda')\n\ndescribe('effects-as-data', () => {\n  describe.skip('runAction', () => {\n    it('should write results to the context object', () => {\n      let { action1, plugins } = setup('test-result1')\n      return runAction(plugins, action1).then((result) => {\n        assert(plugins.test1.calledWith(action1.payload), 'plugin was not called with action payload')\n        deep(result.success, true)\n        deep(result.payload, 'test-result1')\n      })\n    })\n\n    it('should write errors to the error object', () => {\n      let error = new Error('nope')\n      let plugins = {\n        test1: () => Promise.reject(error)\n      }\n\n      let action = test1('result')\n\n      return runAction(plugins, action).then((result) => {\n        deep(result.success, false)\n        deep(result.error, error)\n      })\n    })\n\n    it('should throw if plugin is not registered', () => {\n      let action = {\n        type: 'notRegistered'\n      }\n\n      try {\n        runAction({}, action)\n      } catch (e) {\n        deep(e.message, '\"notRegistered\" is not a registered plugin.')\n        return\n      }\n\n      throw new Error('Exception was not thrown.')\n    })\n  })\n\n  describe.skip('runActions', () => {\n    it('should run multiple actions and return an array of results', () => {\n      let { plugins } = setup('test-result1', 'test-result2')\n      let action1 = testAction('test1', 'tr1')\n      let action2 = testAction('test2', 'tr2')\n      let actions = [action1, action2]\n      return runActions(plugins, actions).then((result) => {\n        deep(result, {\n          context: {\n            tr1: 'test-result1',\n            tr2: 'test-result2'\n          },\n          errors: {}\n        })\n      })\n    })\n  })\n\n  describe('emptyState', () => {\n    it('return an empty state object', () => {\n      deep(emptyState(), {\n        context: {},\n        payload: {},\n        errors: {}\n      })\n    })\n  })\n\n  describe('buildPipes', () => {\n    it('should be able to run a pipe', () => {\n      let plugins = {\n        test1: test1Plugin\n      }\n\n      let pipes = {\n        test1: test1Pipe\n      }\n\n      let { test1 } = buildPipes(plugins, pipes)\n\n      return test1().then((state) => {\n        deep(state.payload, {\n          result: 'test1-result'\n        })\n      })\n    })\n  })\n\n  describe('runPipe', () => {\n    it('should be able to run a pipe', () => {\n      let plugins = {\n        test1: test1Plugin\n      }\n\n      return runPipe(plugins, test1Pipe, emptyState()).then((state) => {\n        deep(state.payload, {\n          result: 'test1-result'\n        })\n      })\n    })\n\n    it('should pass the payload through the pipe', () => {\n      let payload = {\n        foo: 'bar'\n      }\n\n      return runPipe({}, passPayload, payload).then((state) => {\n        deep(state.payload, payload)\n      })\n    })\n\n    it('should pass the context through the pipe', () => {\n      let expectedState = merge(emptyState(), {\n        context: {\n          foo: 'bar'\n        }\n      })\n\n      return runPipe({}, passPayload, expectedState).then((state) => {\n        deep(state.context, expectedState.context)\n      })\n    })\n\n    it('should pass the errors through the pipe', () => {\n      let expectedState = merge(emptyState(), {\n        errors: {\n          foo: new Error('foo!')\n        }\n      })\n\n      return runPipe({}, passPayload, expectedState).then((state) => {\n        deep(state.errors, expectedState.errors)\n      })\n    })\n\n    it('should write errors to the error object', () => {\n      let error = new Error('nope')\n      let plugins = {\n        test1: () => Promise.reject(error)\n      }\n\n      let action = test1('result')\n\n      let fn = () => action\n\n      return runPipe(plugins, fn, emptyState()).then((state) => {\n        deep(state.errors[action.contextKey], error)\n      })\n    })\n\n    it('should perform all actions before returning', () => {\n      return runPipe({}, doubleCall, emptyState()).then((state) => {\n        deep(state.payload, {\n          c1: true,\n          c2: true\n        })\n      })\n    })\n\n    describe('call', () => {\n      it('should call subpipe', () => {\n        let { plugins } = setup()\n\n        let expectedState = {\n          foo: 'bar',\n          sub: 'pipe'\n        }\n\n        return runPipe(plugins, testCall, expectedState).then((state) => {\n          deep(state.payload, expectedState)\n        })\n      })\n    })\n\n    describe('mapPipe', () => {\n      it('should be able to map a pipe over results', () => {\n        let { plugins } = setup()\n\n        return runPipe(plugins, testMap, {}).then((state) => {\n          let expectedPayload = [\n            {id: 1, name: 'User 1'},\n            {id: 2, name: 'User 2'},\n            {id: 3, name: 'User 3'}\n          ]\n\n          deep(state.payload.map(s => s.payload), expectedPayload)\n        })\n      })\n    })\n\n    describe('panic', () => {\n      it('should error out on panic', () => {\n        let { plugins } = setup()\n\n        return runPipe(plugins, testPanic, {}).then((state) => {\n          throw new Error('This should not be called')\n        }).catch((err) => {\n          deep(err.message, 'Something bad happened!')\n        })\n      })\n    })\n\n    describe('end', () => {\n      it('should be able to abort pipe', () => {\n        let { plugins } = setup()\n\n        return runPipe(plugins, testEnd, {}).then(({payload}) => {\n          deep(payload, 2)\n        })\n      })\n    })\n\n    describe('addToContext', () => {\n      it('should add to context', () => {\n        let { plugins } = setup()\n\n        let added = {\n          foo: 'bar'\n        }\n\n        let fn = () => addToContext(added)\n\n        return runPipe(plugins, fn, {}).then(({context}) => {\n          deep(context, added)\n        })\n      })\n\n      it('should allow multiple addToContext actions', () => {\n        let pipe = []\n\n        pipe.push(() => addToContext({\n          one: 1\n        }))\n\n        pipe.push(() => addToContext({\n          two: 2\n        }))\n\n        return runPipe({}, pipe, emptyState()).then((state) => {\n          deep(state.context, {\n            one: 1,\n            two: 2\n          })\n        })\n      })\n    })\n  })\n\n  describe('normalizePipe', () => {\n    it('should normalizePipe pipe to a flat array', () => {\n      let fn1 = () => {}\n      let fn2 = () => {}\n      let fn3 = () => {}\n\n      deep(normalizePipe(fn1), [fn1])\n      deep(normalizePipe([fn1, [fn2, fn3]]), [fn1, fn2, fn3])\n      deep(normalizePipe([fn1, fn2, fn3]), [fn1, fn2, fn3])\n    })\n  })\n\n  describe('logPlugin', () => {\n    it('should console.log message', () => {\n      let plugins = {\n        log: logPlugin\n      }\n\n      let fn = () => log('hi')\n\n      stub(console, 'info')\n      return runPipe(plugins, fn, {}).then(() => {\n        assert(console.info.calledWith('hi'), 'console.info was not called with \"hi\"')\n        console.info.restore()\n      }).catch((e) => {\n        console.info.restore()\n        throw e\n      })\n    })\n  })\n\n  describe('normalizeState', () => {\n    it('should convert value to state object', () => {\n      let state = normalizeState(1)\n      deep(state, {\n        context: {},\n        payload: 1,\n        errors: {}\n      })\n    })\n\n    it('should not change state object', () => {\n      let s1 = {\n        context: {},\n        payload: 1,\n        errors: {}\n      }\n\n      let state = normalizeState(s1)\n      deep(state, s1)\n    })\n\n    it('should return an empty state if value is falsey', () => {\n      let state = normalizeState()\n      deep(state, emptyState())\n    })\n  })\n})\n\nfunction setup (testPluginResult1, testPluginResult2) {\n  let action1 = testAction('test1')\n  let action2 = testAction('test2')\n  let plugins = {\n    test1: stub().returns(Promise.resolve(testPluginResult1)),\n    test2: stub().returns(Promise.resolve(testPluginResult2))\n  }\n\n  let state = emptyState()\n\n  return { action1, action2, state, plugins }\n}\n\nfunction testAction (type = 'test', contextKey = 'testResult') {\n  return {\n    type,\n    contextKey,\n    payload: {\n      foo: 'bar'\n    }\n  }\n}\n"]}