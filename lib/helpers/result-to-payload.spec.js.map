{"version":3,"sources":["../../src/helpers/result-to-payload.spec.js"],"names":[],"mappings":"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","file":"result-to-payload.spec.js","sourcesContent":["const { setPayload, panic } = require('../actions')\nconst { resultToPayload } = require('./result-to-payload')\nconst assert = require('chai').assert\nconst { deepEqual: deep } = assert\n\ndescribe('resultToPayload', () => {\n  it('should copy to result to payload using map', () => {\n    let r1 = 'value1'\n    let r2 = 'value2'\n    let context = {\n      r1,\n      r2\n    }\n\n    let expected = [\n      setPayload({\n        v1: r1,\n        v2: r2,\n        v3: 'value3'\n      })\n    ]\n\n    let actual = resultToPayload({\n      r1: 'v1',\n      r2: 'v2'\n    })({context, errors: {}, payload: {v3: 'value3'}})\n\n    deep(actual, expected)\n  })\n\n  it('should copy to result to payload using array', () => {\n    let r1 = 'value1'\n    let r2 = 'value2'\n    let context = {\n      r1,\n      r2\n    }\n\n    let expected = [\n      setPayload({\n        r1,\n        r2,\n        r3: 'value3'\n      })\n    ]\n\n    let actual = resultToPayload(['r1', 'r2'])({context, errors: {}, payload: {r3: 'value3'}})\n\n    deep(actual, expected)\n  })\n\n  it('should copy to result to payload using a string', () => {\n    let r1 = 'value1'\n    let r2 = 'value2'\n    let context = {\n      r1,\n      r2\n    }\n\n    let expected = [\n      setPayload({\n        r1,\n        r3: 'value3'\n      })\n    ]\n\n    let actual = resultToPayload('r1')({context, errors: {}, payload: {r3: 'value3'}})\n\n    deep(actual, expected)\n  })\n\n  it('should panic if error', () => {\n    let r1 = 'value1'\n    let r2 = 'value2'\n    let context = {\n      r1\n    }\n\n    let errors = {\n      r2\n    }\n\n    let expected = [\n      panic(r2),\n      setPayload({\n        r1,\n        r3: 'value3'\n      })\n    ]\n\n    let actual = resultToPayload(['r1', 'r2'])({context, errors, payload: {r3: 'value3'}})\n\n    deep(actual, expected)\n  })\n})\n"]}