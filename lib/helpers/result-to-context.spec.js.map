{"version":3,"sources":["../../src/helpers/result-to-context.spec.js"],"names":[],"mappings":";;eAAgC,OAAO,CAAC,YAAY,CAAC;;IAA7C,YAAY,YAAZ,YAAY;IAAE,KAAK,YAAL,KAAK;;gBACC,OAAO,CAAC,qBAAqB,CAAC;;IAAlD,eAAe,aAAf,eAAe;;AACvB,IAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAA;IAClB,IAAI,GAAK,MAAM,CAA1B,SAAS;;AAEjB,QAAQ,CAAC,iBAAiB,EAAE,YAAM;AAChC,IAAE,CAAC,4CAA4C,EAAE,YAAM;AACrD,QAAI,EAAE,GAAG,QAAQ,CAAA;AACjB,QAAI,EAAE,GAAG,QAAQ,CAAA;AACjB,QAAI,OAAO,GAAG;AACZ,QAAE,EAAF,EAAE;AACF,QAAE,EAAF,EAAE;KACH,CAAA;;AAED,QAAI,QAAQ,GAAG,CACb,YAAY,CAAC,EAAC,EAAE,EAAE,EAAE,EAAC,CAAC,EACtB,YAAY,CAAC,EAAC,EAAE,EAAE,EAAE,EAAC,CAAC,CACvB,CAAA;;AAED,QAAI,MAAM,GAAG,eAAe,CAAC;AAC3B,QAAE,EAAE,IAAI;AACR,QAAE,EAAE,IAAI;KACT,CAAC,CAAC,EAAC,OAAO,EAAP,OAAO,EAAE,MAAM,EAAE,EAAE,EAAC,CAAC,CAAA;;AAEzB,QAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;GACvB,CAAC,CAAA;;AAEF,IAAE,CAAC,uBAAuB,EAAE,YAAM;AAChC,QAAI,EAAE,GAAG,QAAQ,CAAA;AACjB,QAAI,EAAE,GAAG,QAAQ,CAAA;AACjB,QAAI,OAAO,GAAG;AACZ,QAAE,EAAF,EAAE;KACH,CAAA;;AAED,QAAI,MAAM,GAAG;AACX,QAAE,EAAF,EAAE;KACH,CAAA;;AAED,QAAI,QAAQ,GAAG,CACb,YAAY,CAAC,EAAC,EAAE,EAAE,EAAE,EAAC,CAAC,EACtB,KAAK,CAAC,EAAE,CAAC,CACV,CAAA;;AAED,QAAI,MAAM,GAAG,eAAe,CAAC;AAC3B,QAAE,EAAE,IAAI;AACR,QAAE,EAAE,IAAI;KACT,CAAC,CAAC,EAAC,OAAO,EAAP,OAAO,EAAE,MAAM,EAAN,MAAM,EAAC,CAAC,CAAA;;AAErB,QAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;GACvB,CAAC,CAAA;CACH,CAAC,CAAA","file":"result-to-context.spec.js","sourcesContent":["const { addToContext, panic } = require('../actions')\nconst { resultToContext } = require('./result-to-context')\nconst assert = require('chai').assert\nconst { deepEqual: deep } = assert\n\ndescribe('resultToContext', () => {\n  it('should copy to result to context using map', () => {\n    let r1 = 'value1'\n    let r2 = 'value2'\n    let context = {\n      r1,\n      r2\n    }\n\n    let expected = [\n      addToContext({v1: r1}),\n      addToContext({v2: r2})\n    ]\n\n    let actual = resultToContext({\n      r1: 'v1',\n      r2: 'v2'\n    })({context, errors: {}})\n\n    deep(actual, expected)\n  })\n\n  it('should panic if error', () => {\n    let r1 = 'value1'\n    let r2 = 'value2'\n    let context = {\n      r1\n    }\n\n    let errors = {\n      r2\n    }\n\n    let expected = [\n      addToContext({v1: r1}),\n      panic(r2)\n    ]\n\n    let actual = resultToContext({\n      r1: 'v1',\n      r2: 'v2'\n    })({context, errors})\n\n    deep(actual, expected)\n  })\n})\n"]}